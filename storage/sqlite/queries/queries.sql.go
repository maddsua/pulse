// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package queries

import (
	"context"
)

const getSeriesRange = `-- name: GetSeriesRange :many
select id, time, label, status, elapsed from series
where ?1 >= time and ?2 <= time
`

type GetSeriesRangeParams struct {
	From int64
	To   int64
}

func (q *Queries) GetSeriesRange(ctx context.Context, arg GetSeriesRangeParams) ([]Series, error) {
	rows, err := q.db.QueryContext(ctx, getSeriesRange, arg.From, arg.To)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Series
	for rows.Next() {
		var i Series
		if err := rows.Scan(
			&i.ID,
			&i.Time,
			&i.Label,
			&i.Status,
			&i.Elapsed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSeries = `-- name: InsertSeries :exec
insert into series (
	time,
	label,
	status,
	elapsed
) values (
	?1,
	?2,
	?3,
	?4
)
`

type InsertSeriesParams struct {
	Time    int64
	Label   string
	Status  int64
	Elapsed int64
}

func (q *Queries) InsertSeries(ctx context.Context, arg InsertSeriesParams) error {
	_, err := q.db.ExecContext(ctx, insertSeries,
		arg.Time,
		arg.Label,
		arg.Status,
		arg.Elapsed,
	)
	return err
}
